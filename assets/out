#!/usr/bin/env ash

set -eu

exec 3>&1 # make stdout available as fd 3 for the result
exec 1>&2 # redirect all output to stderr for logging

dir_put=$1

# for jq
PATH=/usr/local/bin:$PATH

payload=$(mktemp /tmp/resource-in.XXXXXX)

cat > "${payload}" <&0

webhook_url="$(jq -r '.source.url' < "${payload}")"
build_status=$(jq -r '(.params.status // null)' < $payload)
additional_link=$(jq -r '(.params.additionalLink // null)' < $payload)
additional_link_name=$(jq -r '(.params.additionalLinkName // null)' < $payload)

case "$build_status" in
  success)
    message_color='00FF00'
    message_summary="${BUILD_PIPELINE_NAME} - ${BUILD_JOB_NAME}"
    message_title="Build ${BUILD_PIPELINE_NAME} - ${BUILD_JOB_NAME} succeeded"
    icon="https://cdnjs.cloudflare.com/ajax/libs/octicons/8.3.0/svg/check.svg"
    ;;
  failure)
    message_color='FF0000'
    message_summary="${BUILD_PIPELINE_NAME} - ${BUILD_JOB_NAME}"
    message_title="Build ${BUILD_PIPELINE_NAME} - ${BUILD_JOB_NAME} failed"
    icon="https://cdnjs.cloudflare.com/ajax/libs/octicons/8.3.0/svg/x.svg"
    ;;
  *)
    exit 1
    ;;
esac

additional_action=""
if [[ "${additional_link}" != "null" ]]
then
  if [[ "${additional_link_name}" == "null" ]]; then
    additional_link_name="Open URL"
  fi

  additional_action="$(cat <<EOF
,
    {
      "@type": "OpenUri",
			"name": "${additional_link_name}",
			"targets": [
				{
					"os": "default",
					"uri": "${additional_link}"
				}
			]
		}
EOF
)"
fi

message_title_link="${ATC_EXTERNAL_URL}/teams/${BUILD_TEAM_NAME}/pipelines/${BUILD_PIPELINE_NAME}/jobs/${BUILD_JOB_NAME}/builds/${BUILD_NAME}"

body="$(cat <<EOF
{
	"@type": "MessageCard",
	"@context": "https://schema.org/extensions",
	"summary": "${message_summary}",
	"themeColor": "${message_color}",
	"title": "${message_title}",
	"potentialAction": [
		{
			"@type": "OpenUri",
			"name": "View in Concourse",
			"targets": [
				{
					"os": "default",
					"uri": "${message_title_link}"
				}
			]
		}
		${additional_action}
	]
}
EOF
)"

compact_body="$(echo "${body}" | jq -c '.')"

curl -X POST \
  "${webhook_url}" \
  -H 'Content-Type: application/json' \
  -H 'cache-control: no-cache' \
  -d "${compact_body}"

#
# print the output
#
timestamp="$(jq -n "{version:{time:\"$(date --utc +%FT%T.%3NZ)\"}}")"
echo "$timestamp" | jq -s add >&3
